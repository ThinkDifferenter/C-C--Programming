#include "Head.h"

void Match()
{
	//计数变量       
	int i = 0;
	int tmp = 0;
	int cnt_v = 0;
	int cnt_i = 0;

	//缓冲区变量-读入每个向量 
	float buf[1025];
	float *V_id;
	double norm = 0.0;


	//打开确认集文件
	char filename_in[1024] = "D:\\高维向量匹配\\hdss_cnsoft2018\\verify_vector_new.fea";
	FILE * fp_in = fopen(filename_in, "rb");

	//目标文件参数 
	char filename_tar[1024] = "";
	FILE * fp_tar;

	//匹配结果文件参数
	char filename_result[1024] = "D:\\高维向量匹配\\hdss_cnsoft2018\\Result.fea";
	FILE * fp_result=fopen(filename_result, "wb+");;


	//判断确认文件是否打开 
	if (fp_in == NULL)
	{
		printf("Can not open %s!\n", filename_in);
		exit(0);
	}

	//读入确认集向量并匹配 
	while (cnt_v<1) 
	{
		cnt_v++;

		//缓存初始化 
		memset(buf, 0, sizeof(buf));

		//读取确认集中一个向量
		fread(buf, sizeof(float), 1025, fp_in);

		//取出确认向量的id
		V_id = (float *)buf;

		//取模
		norm = Norm(buf);
		tmp = (int)((norm - Min_norm) / Step);

		//打开查找目标文件
		sprintf(filename_tar, "D:\\高维向量匹配\\hdss_cnsoft2018\\Index_file_super\\%d.data", tmp);
		fp_tar = fopen(filename_tar, "rb");
		printf("%d\n", tmp);

		//判断当前确认集向量的范数所在位置
		float *T_id;
		double *T_norm;
		double Min_distance = 10000.0;
		double Nd = 0.0;
		double Od = 0.0;
		unsigned char T_buf[4108];
		int flag = 0;

		//获取文件大小-improve
		fseek(fp_in, 0, SEEK_END);
		int size = ftell(fp_in);
		size = size / 4108;
		fseek(fp_in, 0, SEEK_SET);

		//开始查找
		while (cnt_i<size)//!feof(fp_tar)
		{
			cnt_i++;

			//初始化缓冲
			memset(T_buf, 0, sizeof(T_buf));

			//读取索引文件向量
			fread(T_buf, sizeof(unsigned char), 4108 , fp_tar);

			//取参数-improve
			T_id = (float *)T_buf;
			T_norm = (double *)(T_buf + 4);
			Nd = *T_norm - norm;

			if (Nd < 0)
			{
				Nd = -Nd;
			}
			
			//用模初步判断
			if (Nd <= Step)
			{
				//计算欧式距离判断
				Od = O_distance(buf+4, (float *)T_buf+12);

				if (Od <= 100)
				{
					//将符合条件的向量写入指定文件
					fwrite(T_buf, sizeof(unsigned char), 4108, fp_result);

					printf("Orign_id =%.0f\t Match_id=%.0f\n", V_id, T_id);
				}
			}

		}

		fclose(fp_tar);
	}

	//文件关闭 
	fclose(fp_in);
	fclose(fp_result);

}